/*
* jquery.riak
*
* Contains utilities for Riak CS web interface
*
* DEPENDANCIES:
*
* jquery.alerts.js
* spark-md5
*
*
*/

var i18n_catalog = {
{% for k,v in messages %}"{{ k }}": "{{ v }}"{% if not forloop.last %},{% endif %}{% endfor %}
};

function gettext(msgid) {
  var value = i18n_catalog[msgid];
  if (typeof(value) == 'undefined') {
    return msgid;
  } else {
    return (typeof(value) == 'string') ? value : value[0];
  }
}

(function($){

$.stack = function(options){
 if ( typeof(options) == "undefined" || options == null ) { options = {}; };

 var RiakAPI = {
    options: $.extend({
	    token: '{{ token }}',
	    bucketName: '{{ bucket_id }}',
	    errorElementID: '',
	    rpc_url: '',
	    task_timeout: 1000,
	    attempts: 15,
            onSuccess: function(data, status){ },
	    onFailure: function(xhr, status, data){ },
	    onProgress: function(evt){ },
	    loadingMsgColor: 'green',
	    uploaded_bytes: 0,
	    chunk_size: {{ chunk_size }}
    }, options),
    get_json: function(data, callback, error_callback){
     $.ajax({
	url: RiakAPI.options.rpc_url,
	cache: false,
	dataType: 'json',
	data: data,
	beforeSend: function (xhr) {
	    xhr.setRequestHeader("authorization", "Token {{ token }}");
	},
	success: function(data, status){
	    if(data&&data.hasOwnProperty('error')){
		if(!error_callback){
		  $('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext(data['error'])+'</span>');
		} else {
		  error_callback(data);
		}
		return;
	    } else {
		$('#failure').hide();
	    }
	    if(callback) callback(data, status);
	}
     }).fail(function(jqxhr, textStatus, error){
	var err = textStatus + ', ' + error;
	$('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext(err)+'</span>');
     });
    },
    post_json: function(url, form_data, headers, onSuccess, onFailure, onProgress){
     // ``form_data`` -- instance of ``FormData``
     $.ajax({
	url: url,
	type: 'POST',
	cache: false,
	dataType: 'json',
	data: form_data,
	processData: false,
	contentType: false,
	timeout: 480000,
	headers: headers,
	success: function(data, status, jqXHR){
	    if(data&&data.hasOwnProperty('error')){
		onFailure(NaN, NaN, gettext(data['error']));
		return;
	    }
	    onSuccess(data, status);
	},
	beforeSend: function (xhr) {
	    xhr.setRequestHeader("authorization", "Token {{ token }}");
	},
        xhr: function(){
            var req = $.ajaxSettings.xhr();
            if (req){
		if (typeof req.upload == "object") {
		    req.upload.addEventListener("progress", function(evt) {
			onProgress(evt);
		    });
		}
            }
	    return req;
	}
     }).fail(function(xhr, status, msg){
      var data;
      try {
	data=$.parseJSON(xhr.responseText);
      } catch(e) {};
      if(data&&data.hasOwnProperty('error')){
        onFailure(gettext(data['error']), xhr, status);
      }else{
        onFailure(gettext("Something's went horribly wrong."), xhr, status);
      }
     });
    },
    _get_md5: function(data, success_callback, error_callback){
	var promise = $.Deferred();
	var reader = new FileReader();
	reader.onload = function(e){
	  var spark = new SparkMD5.ArrayBuffer();
	  spark.append(e.target.result);
	  var checksum = spark.end();
	  if(checksum) promise.resolve(checksum);
	  else promise.reject();
	};
	reader.onerror = error_callback;
	try{
	  reader.readAsArrayBuffer(data);
	}catch(e){
	  promise.reject();
	}
	promise.done(success_callback);
	promise.fail(error_callback);
    },
    _chunked_upload: function(upload_id, modified_utc, prefix, file, offset, multipart_id, oname, etags){
	/*
	    upload_id -- DOM object ID
	    modified_utc -- last modified date ( UTC timestamp )
	    prefix -- object storage path ( directory name )
	    file -- browser's file object
	    offset -- position in file to upload from
	    multipart_id -- unique upload id
	    oname -- object name, generated and returned by server
	    etags -- list of md5 sums of file parts. It is passed with the last part to server
	*/
	var chunk_size = RiakAPI.options.chunk_size;
	var blob_slice = window.Blob && (Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice);
	var blob = blob_slice.call(file, offset, offset+chunk_size, file.type);
	var blob_size = blob.size;
	var attempts=$('#'+RiakAPI.options.errorElementID).attr('data-attempts');
	var part_num=parseInt(offset/chunk_size)+1;
	if(attempts==undefined) attempts=5;
	RiakAPI._get_md5(blob, function(checksum){
	  var form_data = new FormData();
	  form_data.append('files[]', blob, file.name);
	  form_data.append('modified_utc', modified_utc);
	  etags.push([part_num, checksum]);
	  if(offset+chunk_size >= file.size){ // last chunk, add etags to complete upload
	    form_data.append('etags[]', etags);
	  }
	  if(prefix) form_data.append('prefix', prefix);
	  if(oname) form_data.append('object_name', oname);
	  var headers = {'content-range': 'bytes '+offset+'-'+(offset + blob_size - 1)+'/'+file.size};
	  if(multipart_id){ var post_url=RiakAPI.options.rpc_url+multipart_id+'/'+part_num+'/'
	  } else {var post_url=RiakAPI.options.rpc_url;}
	  RiakAPI.post_json(post_url, form_data, headers, function(data, status){
	      if(data.hasOwnProperty('error')){
	        $('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext(data['error'])+'</span>');
		return;
	      };
	      if(file.size-data.end_byte-1==0){
	        RiakAPI.options.onSuccess(data, status);
	      } else {
		var umid = data.upload_id;
		var oname = data.object_name;
	        RiakAPI._chunked_upload(upload_id, modified_utc, prefix, file, data.end_byte+1, umid, oname, etags);
	      }
	    },
	    function(xhr, status, msg){
	      if(msg=='fd_error'){
		$('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext('file read error')+'</span>');
		return;
	      } else if(msg&&msg.hasOwnProperty('error')){
	        $('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext(msg['error'])+'</span>');
		return;
	      } else if((status=='error'||status=='timeout')&&xhr.readyState==0){
		 attempts-=1;
		 $('#'+RiakAPI.options.errorElementID).attr('data-attempts', attempts);
		 if(attempts<0){
		  $('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext("connection timeout")+'</span>');
		  return;
		 }
		 $('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext('network error, retrying')+'</span>');
		 setTimeout(function(){
		    var umid = data.upload_id;
		    var oname = data.object_name;
		    RiakAPI._chunked_upload(upload_id, modified_utc, prefix, file, offset, umid, oname, etags);
		}, 3000);
		return;
	      } else if(status=='error'){
		$('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext('error, try later')+'</span>');
	      }
	    },
	    function(evt){ RiakAPI.options.onProgress(evt, offset, file.size);}
	  );
	}, function(){RiakAPI.options.onFailure(NaN, NaN, 'fd_error')});
	return etags;
    },
    file_upload: function(file, upload_id, prefix){
	var form_data = new FormData();
	var chunk_size = RiakAPI.options.chunk_size;
	var file_size = file.size;
	var modified_utc = (new Date( file.lastModified )).getTime()/1000; // TODO: replace with DVV
	if(file.size >= chunk_size){
	    RiakAPI._chunked_upload(upload_id, modified_utc, prefix, file, 0, NaN, NaN, []);
	} else {
	 RiakAPI._get_md5(file, function(checksum){
	  form_data.append('files[]', file);
	  form_data.append('modified_utc', modified_utc);
	  if(prefix) form_data.append('prefix', prefix);
	  var headers = {'content-range': 'bytes 0-'+(file_size-1)+'/'+file.size};
	  RiakAPI.post_json(RiakAPI.options.rpc_url, form_data, headers, RiakAPI.options.onSuccess, RiakAPI.options.onFailure, RiakAPI.options.onProgress);
	 }, function(){RiakAPI.options.onFailure(NaN, NaN, 'fd_error')});
	}
    },
    reset_defaults: function(){
      RiakAPI.options.attempts=15;
    },
    stack_rpc: function(args, callback){
      var params = [];
      if(args){
	for(k in args){
	  params.push({'name': k, 'value': args[k]});
	}
      }
      $('#'+RiakAPI.options.errorElementID).empty().append('<span style="color:'+RiakAPI.options.loadingMsgColor+';">'+gettext('Loading..')+'</span>');
      RiakAPI.get_json(params, function(data,status){
	   RiakAPI.reset_defaults();
	   if(RiakAPI.options.onSuccess) RiakAPI.options.onSuccess(data);
      }, function(data){
	  if(RiakAPI.options.onFailure){
	    RiakAPI.options.onFailure(NaN, NaN, data);
	  } else {
	    $('#'+RiakAPI.options.errorElementID).empty().append('<span class="err">'+gettext("5")+'</span>');
	  }
      });
    },
    get_objects_list: function(prefix){
      if(prefix){
       if(prefix.indexOf('/', prefix.length - 1) == -1) prefix = prefix+'/';
       RiakAPI.stack_rpc({'prefix': prefix});
      } else {
       RiakAPI.stack_rpc();
      }
    },
    directory_create: function(hex_prefix, directory_name){
	var form_data = {};
	form_data['directory_name'] = directory_name;
	if(hex_prefix) form_data['prefix'] = hex_prefix;
	RiakAPI.post_json(RiakAPI.options.rpc_url, JSON.stringify(form_data), {'Content-Type': 'application/json'},
	    RiakAPI.options.onSuccess, RiakAPI.options.onFailure, RiakAPI.options.onProgress);
    },
    update_object: function(bucket_id, prefix, object_name, new_name){
      RiakAPI.stack_rpc({'bucket_id': bucket_id, 'object_name': object_name, 'prefix': prefix, 'new_file_name': new_name});
    },
    delete_object: function(prefix, object_name){
      $.ajax({
	url: RiakAPI.options.rpc_url,
	type: 'DELETE',
	cache: false,
	dataType: 'json',
	data: JSON.stringify({"prefix": prefix, "object_name": object_name}),
	processData: false,
	contentType: 'application/json',
	timeout: 480000,
	success: function(data, status, jqXHR){
	    if(data&&(status!='success')){
		RiakAPI.options.onFailure(NaN, NaN, data);
		return;
	    }
	    RiakAPI.options.onSuccess(data, status);
	},
	beforeSend: function (xhr) {
	    xhr.setRequestHeader("authorization", "Token {{ token }}");
	}
      }).fail(function(xhr, status, msg){
        var e=msg;
        try {
	  e=$.parseJSON(xhr.responseText);
        } catch(e) {};
        RiakAPI.options.onFailure(e, xhr, status);
       });
    },
    copy_object: function(from_bucket_id, from_prefix, from_object_name, to_bucket_id, to_prefix, to_object_name){
	var form_data = {};
	form_data['src_bucket_id'] = from_bucket_id;
	form_data['src_prefix'] = from_prefix;
	form_data['src_object_names'] = [from_object_name];
	form_data['dst_bucket_id'] = to_bucket_id;
	form_data['dst_prefix'] = to_prefix;
	RiakAPI.post_json(RiakAPI.options.rpc_url, JSON.stringify(form_data), {'Content-Type': 'application/json'},
	    RiakAPI.options.onSuccess, RiakAPI.options.onFailure, RiakAPI.options.onProgress);
    },
    rename_object: function(hex_prefix, src_object_name, dst_object_name){
	var form_data = {};
	if(hex_prefix!=undefined) form_data['prefix'] = hex_prefix;
	form_data['src_object_name'] = src_object_name;
	form_data['dst_object_name'] = dst_object_name;
	RiakAPI.post_json(RiakAPI.options.rpc_url, JSON.stringify(form_data), {'Content-Type': 'application/json'},
	    RiakAPI.options.onSuccess, RiakAPI.options.onFailure, RiakAPI.options.onProgress);
    },
    get_object_metadata: function(bucket_id, hex_prefix, object_name){
      RiakAPI.stack_rpc({'object_name': object_name, 'prefix': prefix});
    },
    is_compatible_browser: function(){
     return !!window.FileReader;
     // For devices which give false positives for the feature detection
     //return !(new RegExp('(Android (1\\.[0156]|2\\.[01]))|(Windows Phone (OS 7|8\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)|(w(eb)?OSBrowser)|(webOS)|(Kindle/(1\\.0|2\\.[05]|3\\.0))').test(window.navigator.userAgent)||false);
    },
    slice_blob: function(){
     var slice = window.Blob && (Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice);
    },
    get_token: function(){
	return RiakAPI.options.token;
    },
    get_bucket_id: function(){
	return RiakAPI.options.bucketName;
    },
    get_action_log: function(prefix){
      if(prefix){
       if(prefix.indexOf('/', prefix.length - 1) == -1) prefix = prefix+'/';
       RiakAPI.stack_rpc({'prefix': prefix});
      } else {
       RiakAPI.stack_rpc();
      }
    }
 };
 return {
    get_objects_list: RiakAPI.get_objects_list,
    directory_create: RiakAPI.directory_create,
    update_object: RiakAPI.update_object,
    delete_object: RiakAPI.delete_object,
    copy_object: RiakAPI.copy_object,
    file_upload: RiakAPI.file_upload,
    get_riak_url: RiakAPI.get_riak_url,
    get_bucket_id: RiakAPI.get_bucket_id,
    get_object_metadata: RiakAPI.get_object_metadata,
    get_action_log: RiakAPI.get_action_log,
    rename_object: RiakAPI.rename_object
 };
};
})(jQuery);
